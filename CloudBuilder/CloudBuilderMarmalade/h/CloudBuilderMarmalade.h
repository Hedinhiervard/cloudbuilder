/*
 * (C) 2001-2012 Marmalade. All Rights Reserved.
 *
 * This document is protected by copyright, and contains information
 * proprietary to Marmalade.
 *
 * This file consists of source code released by Marmalade under
 * the terms of the accompanying End User License Agreement (EULA).
 * Please do not use this program/source code before you have read the
 * EULA and have agreed to be bound by its terms.
 */
/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
#ifndef S3E_EXT_CLOUDBUILDERMARMALADE_H
#define S3E_EXT_CLOUDBUILDERMARMALADE_H

#include <s3eTypes.h>

//  Error codes returned by CloudBuilder classes
enum CloudBuilderMarmaladeError
{
		///   No error.
        CLOUDBUILDERMARMALADE_ERR_NOERR = 0,
        
		///  Obsolete.
       CLOUDBUILDERMARMALADE_ERR_BAD_COMMUNITY_KEY,
        ///  Obsolete.
        CLOUDBUILDERMARMALADE_ERR_BAD_COMMUNITY_CREDENTIAL,
		///  Obsolete.
        CLOUDBUILDERMARMALADE_ERR_BAD_APP_KEY,
        ///  The parameters you passed to CClan::Setup are wrong.
        CLOUDBUILDERMARMALADE_ERR_BAD_APP_CREDENTIAL,
        ///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_BAD_APP_ID,
		///  Trying to access some features, but CClan::Setup has not been called.
        CLOUDBUILDERMARMALADE_ERR_SETUP_NOT_CALLED, 
		
		///  Trying to register with an already registered email or pseudo.
        CLOUDBUILDERMARMALADE_ERR_REGISTER_WITH_USED_EMAIL_OR_PSEUDO,
		///  The password sent is not the right one, or the user does not exist.
        CLOUDBUILDERMARMALADE_ERR_BAD_CREDENTIALS_OR_NOT_REGISTERED_USER,
        /// The user is already logged in another session.
        CLOUDBUILDERMARMALADE_ERR_ALREADY_LOGGED,
        ///  Trying to access some features, but the user is not logged yet.
        CLOUDBUILDERMARMALADE_ERR_NOT_LOGGED,			
		///  The score posted for consideration in leaderboard is not the best one for this user. Not a critical error.
        CLOUDBUILDERMARMALADE_ERR__NOT_HIGHER_SCORE,
        
        ///  You've called some feature, but the previous CClan::Setup had failed.
        CLOUDBUILDERMARMALADE_ERR_APP_NOT_REGISTER,
        
        ///  The characters entered for the user are not supported.
        CLOUDBUILDERMARMALADE_ERR_FORBIDDEN_CHAR,
        ///  The submitted string is too long.
        CLOUDBUILDERMARMALADE_ERR_STRING_TOO_LONG,
        ///  Something is missing in the JSON you sent with your query.
        CLOUDBUILDERMARMALADE_ERR_BAD_PARAMETERS,
		///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_TOO_MANY_PARAMETERS,
        ///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_PREVIOUS_STATE,
        
		///  Timeout reached, no result retrieved.
        CLOUDBUILDERMARMALADE_ERR_NETWORK_TIMEOUT,
		///  Something wrong happened on the network.
        CLOUDBUILDERMARMALADE_ERR_NETWORK_ERROR,
        
        ///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_SQS_ERROR,
		///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_CURL_ERROR,
		
		///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_QUEUE_DOES_NOT_EXIST,
		///  Internal error, please contact Clan of the Cloud.
        CLOUDBUILDERMARMALADE_ERR_RECURSIVE_QUEUE_EVENT,
		
		///  You need to feed a "PlayersSet" section in the required JSON.
        CLOUDBUILDERMARMALADE_ERR_MATCH_NO_PLAYER_SET,
		///  Obsolete.
        CLOUDBUILDERMARMALADE_ERR_MATCH_NO_ACTIVE_PLAYER,
		///  Obsolete.
        CLOUDBUILDERMARMALADE_ERR_MATCH_NO_GAME_STATE,
		///  Obsolete
        CLOUDBUILDERMARMALADE_ERR_MATCH_NO_MOVE,
		///  The match is not active yet.
        CLOUDBUILDERMARMALADE_ERR_MATCH_NO_ACTIVE_MATCH,
		
		///  Trying to Login with a FB account, but its associated email is already registered.
        CLOUDBUILDERMARMALADE_ERR_ACCOUNT_NOT_LINKED_TO_FB,

		///  Internal error, please contact Clan of the Cloud.
		CLOUDBUILDERMARMALADE_ERR_S3_ERROR,

		///  Try to use facebook login but the CClan constructor did not specify it
		CLOUDBUILDERMARMALADE_ERR_EXTERNAL_COMMUNITY_NOT_SETUP,
		
		///  Try to read a non-existing key
		CLOUDBUILDERMARMALADE_ERR_NO_SUCH_KEY,
		
		///  Try to invite a user which is already part of the tribe
		CLOUDBUILDERMARMALADE_ERR_ALREADY_MEMBER,
		
		/// Try to link an account which is already linked to facebook
		CLOUDBUILDERMARMALADE_ERR_ALREADY_FACEBOOK_LINKED,

		/// Try to link a facebook account which is already linked to another pseudo
		CLOUDBUILDERMARMALADE_ERR_ALREADY_FACEBOOK_LINKED_TO_OTHER,

        /// Error received from the Facebook APIs
        CLOUDBUILDERMARMALADE_ERR_EXTERNAL_COMMUNITY_ERROR,
        
        /// CMatchRoom::Join has been called twice
        CLOUDBUILDERMARMALADE_ERR_ROOM_ALREADY_LINKED,
		
        /// CMatchRoom instance is not linked with a room
        CLOUDBUILDERMARMALADE_ERR_ROOM_ID_NOT_SET,
		
		/// Pseudo doesn't exist in DB
		CLOUDBUILDERMARMALADE_ERR_PSEUDO_NOT_EXIST,
        
		/// The Google+ application is not installed on the device
		CLOUDBUILDERMARMALADE_ERR_GOOGLEPLUS_APP_NOT_INSTALLED,
        
		/// User has canceled Google+ post
		CLOUDBUILDERMARMALADE_ERR_CANCELLED_GOOGLEPLUS_POST,
        
		/// User is not logged into GooglePlayServices
		CLOUDBUILDERMARMALADE_ERR_USER_NOT_LOGGED_IN_GOOGLEPLAY_SERVICES,
        
		/// An error occured during a GooglePlay Services request
		CLOUDBUILDERMARMALADE_ERR_ERROR_GOOGLEPLAY_SERVICES,
        
		/// The time settings on the device are too different than the one on CotC servers
        CLOUDBUILDERMARMALADE_ERR_REQUEST_TIME_TOO_SKEWED,
		
		/// Try to call BatchBegin, but previous call not yet ended by a call to BatchEnd
		CLOUDBUILDERMARMALADE_ERR_BATCH_MODE_ALREADY_ACTIVE,
		
		/// Try to call BatchEnd, without previous call to BatchBegin
		CLOUDBUILDERMARMALADE_ERR_BATCH_MODE_NOT_ACTIVE,
        
        /// You shouldn't receive this error, it's just a convenient value
        CLOUDBUILDERMARMALADE_ERR_LAST_ERROR // 48
};

//  See C++ file CUserManager.h
enum cbmExternalNetwork {
    eFacebook = 0,
    eGooglePlus,
    eGameCenter
};

//  See C++ file CGameManager.h
enum cbmScoreType {
    eHighToLow = 0,
    eLowToHigh
};

//  See C++ file CTribeManager.h
enum cbmRelationChange {
    eNone = 0,
    eFriend,
    eForget,
    eBlacklist
};

//  See C++ file CMatchManager.h
enum cbmMatchStatus {
    eMatchClaimed = 0,
    eMatchJoin,
    eMatchRefuse
};

enum cbmMatchPhase {
    ePhaseStart,
    ePhaseMove,
    ePhaseEnd
};

//  See C++ file CGooglePlay.h
enum cbmGooglePlayAchievementType {
    eGooglePlayAchievementStandard = 0,
    eGooglePlayAchievementIncremental
};

enum cbmGooglePlayAchievementState {
    eGooglePlayAchievementUnlocked = 0,
    eGooglePlayAchievementRevealed,
    eGooglePlayAchievementHidden
};

enum cbmGooglePlayLeaderboardOrder {
    eGooglePlayLargerIsBetter = 0,
    eGooglePlaySmallerIsBetter
};

enum cbmGooglePlayTimeSpan {
    eGooglePlayDaily = 0,
    eGooglePlayWeekly,
    eGooglePlayAllTime
};

enum cbmGooglePlayLeaderboardCollection {
    eGooglePlayPublic = 0,
    eGooglePlaySocial
};

//  Types returned by the different callbacks

//  Simple int type holding a value of the enum CloudBuilderMarmaladeError
//  to describe the result of a request
typedef int CloudBuilder_ErrorCode;

//  Sends info when the global callback CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_USER_RECEIVED_NOTIFY_USER is invoked.
typedef struct SGlobalNotifyUser
{
    const char* mFromUserID;
    const char* mData;
} SGlobalNotifyUser;

//  Sends info when the global callback CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_NOTIFICATION_RECEIVED_MAINTENANCE_COMMUNICATION is invoked.
typedef struct SGlobalMaintenanceNotification
{
    const char* mKind;
    const char* mData;
} SGlobalMaintenanceNotification;

//  Sends info when the global callback CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_TRIBE_RELATIONSHIP_HAS_CHANGED is invoked.
typedef struct SGlobalRelationshipHasChanged
{
    const char*         mUserID;
    cbmRelationChange   mNewState;
} SGlobalRelationshipHasChanged;

//  Sends info when the global callback CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MATCH_PLAYER_DID_CHANGE_STATE is invoked.
typedef struct SGlobalPlayerDidChangeState
{
    const char*     mMatchID;
    const char*     mUserID;
    cbmMatchStatus  mStatus;
} SGlobalPlayerDidChangeState;

//  Sends info when the global callback CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MATCH_MATCH_RECEIVE_DATA is invoked.
typedef struct SGlobalMatchReceiveData
{
    const char*     mMatchID;
    const char*     mFromUserID;
    cbmMatchPhase   mPhase;
    const char*     mMatchState;
} SGlobalMatchReceiveData;

//  Sends back the result of a request with an optional description if mErrorCode
//  is different than CLOUDBUILDERMARMALADE_ERR_NOERR
typedef struct SResultWithDescription
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mDescription;
} SResultWithDescription;

//  Sends back the result of a request, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, mJson is a string representing a
//  JSON value to be parsed
typedef struct SResultWithJson
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mJson;
} SResultWithJson;

//  Sends back the result of a request, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, mJson is a string representing a
//  JSON value to be parsed
typedef struct SResultLoginWith
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mProfileJson;
    const char*                 mDescription;
} SResultLoginWith;

//  Sends back the result of a ReadBinary, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultReadBinary
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mKey;
    void*                       mPointer;
    unsigned long               mLength;
} SResultReadBinary;

//  Sends back the result of a WriteBinary, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultWriteBinary
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mKey;
    void*                       mPointer;
} SResultWriteBinary;

//  Sends back the result of a Read, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultRead
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mKey;
    const char*                 mValue;
} SResultRead;

//  Sends back the result of a Write, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultWrite
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mKey;
} SResultWrite;

//  Sends back the result of a GetProperties, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultGetProperties
{
    CloudBuilder_ErrorCode      mErrorCode;
    bool                        mCanBeFound;
    const char*                 mPropertiesListJson;
} SResultGetProperties;

//  Sends back the result of a CheckUser, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultCheckUser
{
    CloudBuilder_ErrorCode      mErrorCode;
    bool                        mExists;
} SResultCheckUser;

//  Sends back the result of a GetRank, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultGetRank
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMode;
    long                        mRank;
} SResultGetRank;

//  Sends back the result of a BestHighScore, and if mErrorCode is equal
//  to CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultBestHighScore
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMode;
    const char*                 mScoresJson;
} SResultBestHighScore;

//  Sends back the result of a BestHighScoreArray, and if mErrorCode is equal
//  to CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultBestHighScoreArray
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mModesJson;
    const char*                 mScoresJson;
} SResultBestHighScoreArray;

//  Sends back the result of a ChangeRelationshipStatus/ChangeGlobalRelationshipStatus,
//  and if mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields
//  describe the value
typedef struct SResultChangeRelationshipStatus
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mFriendPseudo;
    cbmRelationChange           mNewState;
} SResultChangeRelationshipStatus;

//  Sends back the result of a GetMatchData, and if mErrorCode is equal to
//CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultGetMatchData
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMatchID;
    const char*                 mMatchDataJson;
} SResultGetMatchData;

//  Sends back the result of a ReadBinary (CMatch class only), and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultMatchReadBinary
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMatchID;
    const char*                 mKey;
    void*                       mPointer;
    unsigned long               mLength;
} SResultMatchReadBinary;

//  Sends back the result of a WriteBinary (CMatch class only), and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultMatchWriteBinary
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMatchID;
    const char*                 mKey;
    void*                       mPointer;
} SResultMatchWriteBinary;

//  Sends back the result of a Read (CMatch class only), and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultMatchRead
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMatchID;
    const char*                 mKey;
    const char*                 mValue;
} SResultMatchRead;

//  Sends back the result of a Write (CMatch class only), and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultMatchWrite
{
    CloudBuilder_ErrorCode      mErrorCode;
    const char*                 mMatchID;
    const char*                 mKey;
} SResultMatchWrite;

//  Sends back the result of a NotifyUserall h (CMatch class only), and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultNotifyUser
{
    CloudBuilder_ErrorCode      mErrorCode;
    void*                       mReference;
} SResultNotifyUser;

//  Sends back the result of a GooglePlay SubmitScore, and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultGooglePlaySubmitScore
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mLeaderboardID;
} SResultGooglePlaySubmitScore;

//  Sends back the result of a GooglePlay LoadLeaderboardMetadata or
//  LoadLeaderboardsMetadata, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultGooglePlayLoadLeaderboardMetadata
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mJsonLeaderboardMetadata;
} SResultGooglePlayLoadLeaderboardMetadata;

//  Sends back the result of a GooglePlay LoadPlayerCenteredScores or
//  LoadTopScores, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other fields describe the value
typedef struct SResultGooglePlayLoadScores
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mJsonLeaderboard;
    const char*                 mJsonScores;
} SResultGooglePlayLoadScores;

//  Sends back the result of a GooglePlay IncrementAchievement, and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultGooglePlayIncrementAchievement
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mAchievement;
    bool                        mUnlocked;
} SResultGooglePlayIncrementAchievement;

//  Sends back the result of a GooglePlay LoadAchievements, and if
//  mErrorCode is equal to CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultGooglePlayLoadAchievements
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mJsonAchievements;
} SResultGooglePlayLoadAchievements;

//  Sends back the result of a GooglePlay RevealAchievement or
//  UnlockAchievement, and if mErrorCode is equal to
//  CLOUDBUILDERMARMALADE_ERR_NOERR, the other
//  fields describe the value
typedef struct SResultGooglePlayAchievementResult
{
    CloudBuilder_ErrorCode      mErrorCode;
    int                         mGooglePlayError;
    const char*                 mAchievement;
} SResultGooglePlayAchievementResult;

//  These are needed on Android only since the link mechanism must
//  be done at compile time. You should only use these enums with
//  the file provided by Clan of the Cloud, CloudBuilderLink.cpp
//  They have no other purposes and won't be used for anything else.
enum cbmFunctions {
    eCloudBuilder_PopCallback = 0,
    eClan_Setup,
    eClan_BatchBegin,
    eClan_BatchEnd,
    eClan_isSetup,
    eClan_isUserLogged,
    
    eUser_RegisterAndLogin,
    eUser_Login,
    eUser_LoginWithFacebook,
    eUser_LoginWithGooglePlus,
    eUser_LoginWithGameCenter,
    eUser_Logout,
    eUser_LinkAccountWithFacebook,
    eUser_LinkAccountWithGooglePlus,
    eUser_LinkAccountWithGameCenter,
    eUser_ChangePassword,
    eUser_MailPassword,
    eUser_SetUserProfile,
    eUser_GetUserProfile,
    eUser_GetPseudo,
    eUser_GetMail,
    eUser_PublishOnMyFacebookWall,
    eUser_ReadBinary,
    eUser_WriteBinary,
    eUser_Read,
    eUser_Write,
    eUser_SetProperties,
    eUser_GetProperties,
    eUser_CheckUser,
    eUser_SetAvatarSource,
    
    eGame_Score,
    eGame_GetRank,
    eGame_BestHighScore,
    eGame_CenteredScore,
    eGame_GetRankArray,
    eGame_BestHighScoreArray,
    eGame_ReadBinary,
    eGame_WriteBinary,
    eGame_Read,
    eGame_Write,
    
    eTribe_ListUsers,
    eTribe_ListGlobalFriends,
    eTribe_BlacklistGlobalFriends,
    eTribe_ChangeGlobalRelationshipStatus,
    eTribe_ListFriends,
    eTribe_BlacklistFriends,
    eTribe_ChangeRelationshipStatus,
    eTribe_ListFacebookFriends,
    eTribe_ListGooglePlusFriends,
    eTribe_ListGameCenterFriends,
    eTribe_InviteFriendByMail,
    eTribe_InviteFriendByFBID,
    eTribe_InviteFriendByGooglePlusID,
    eTribe_FriendsBestHighScore,
    eTribe_FriendsBestHighScoreArray,
    eTribe_FindOpponents,
    
    eMatch_GetActiveMatchID,
    eMatch_HasActiveMatch,
    eMatch_GetMatchData,
    eMatch_ListMatch,
    eMatch_ListPendingMatch,
    eMatch_CreateMatch,
    eMatch_InviteFriends,
    eMatch_JoinMatch,
    eMatch_MatchMove,
    eMatch_ReadBinary,
    eMatch_WriteBinary,
    eMatch_Read,
    eMatch_Write,

    eNotification_NotifyUser,
    
    eGooglePlay_IsConnected,
    eGooglePlay_LoadPeople,
    eGooglePlay_ShowAllLeaderboards,
    eGooglePlay_ShowLeaderboard,
    eGooglePlay_SubmitScore,
    eGooglePlay_LoadLeaderboardMetadata,
    eGooglePlay_LoadLeaderboardsMetadata,
    eGooglePlay_LoadPlayerCenteredScores,
    eGooglePlay_LoadTopScores,
    eGooglePlay_ShowAchievements,
    eGooglePlay_IncrementAchievement,
    eGooglePlay_LoadAchievements,
    eGooglePlay_RevealAchievement,
    eGooglePlay_UnlockAchievement,

    eNumFunctions
};

//  Callbacks managed by CloudBuilder in Marmalade environment
enum CloudBuilderMarmaladeCallback
{
    //  The CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_xxxxxx are callbacks which must be first setup
    //  by the developer. They are called by Clan of the Cloud SDK when needed, they are not the
    //  results of a request. They have to be setup by the function 
    //  The systemData received by this callback is of type SGlobalNotifyUser.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_USER_RECEIVED_NOTIFY_USER,
    
    //  The systemData received by this callback is of type SGlobalMaintenanceNotification.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_NOTIFICATION_RECEIVED_MAINTENANCE_NOTIFICATION,

    //  The systemData received by this callback is the NULL parameter.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_NOTIFICATION_DID_BEGIN_LOOKING_FOR_NOTIFICATION,

    //  The systemData received by this callback is a pointer on an int.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_NOTIFICATION_DID_END_LOOKING_FOR_NOTIFICATION,

    //  The systemData received by this callback is a pointer on an int.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_NOTIFICATION_DID_REGISTER_DEVICE,

    //  The systemData received by this callback is of type SGlobalRelationshipHasChanged.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_TRIBE_RELATIONSHIP_HAS_CHANGED,

    //  The systemData received by this callback is of type SGlobalPlayerDidChangeState.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MATCH_PLAYER_DID_CHANGE_STATE,

    //  The systemData received by this callback is of type SGlobalMatchReceiveData.
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MATCH_MATCH_RECEIVE_DATA,
    
    CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MAX,


    CLOUDBUILDERMARMALADE_CALLBACK_CLAN_DID_SETUP = CLOUDBUILDERMARMALADE_CALLBACK_GLOBAL_MAX,
    CLOUDBUILDERMARMALADE_CALLBACK_CLAN_DID_BATCH_END,
    
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_REGISTER_AND_LOGIN,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LOGIN,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LOGIN_WITH_FACEBOOK,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LOGIN_WITH_GOOGLEPLUS,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LOGIN_WITH_GAMECENTER,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LOGOUT,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LINK_ACCOUNT_WITH_FACEBOOK,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LINK_ACCOUNT_WITH_GOOGLEPLUS,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_LINK_ACCOUNT_WITH_GAMECENTER,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_CHANGE_PASSWORD,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_MAIL_PASSWORD,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_SET_USER_PROFILE,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_GET_USER_PROFILE,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_PUBLISH_ON_MY_FACEBOOK_WALL,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_READ_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_WRITE_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_READ,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_WRITE,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_SET_PROPERTIES,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_GET_PROPERTIES,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_CHECK_USER,
    CLOUDBUILDERMARMALADE_CALLBACK_USER_DID_SET_AVATAR_SOURCE,

    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_SCORE,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_GET_RANK,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_BEST_HIGH_SCORE,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_CENTERED_SCORE,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_GET_RANK_ARRAY,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_BEST_HIGH_SCORE_ARRAY,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_READ_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_WRITE_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_READ,
    CLOUDBUILDERMARMALADE_CALLBACK_GAME_DID_WRITE,
    
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_USERS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_GLOBAL_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_BLACKLIST_GLOBAL_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_CHANGE_GLOBAL_RELATIONSHIP_STATUS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_BLACKLIST_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_CHANGE_RELATIONSHIP_STATUS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_FACEBOOK_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_GOOGLEPLUS_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_LIST_GAMECENTER_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_INVITE_FRIEND_BY_MAIL,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_INVITE_FRIEND_BY_FBID,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_INVITE_FRIEND_BY_GOOGLEPLUSID,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_FRIENDS_BEST_HIGH_SCORE,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_FRIENDS_BEST_HIGH_SCORE_ARRAY,
    CLOUDBUILDERMARMALADE_CALLBACK_TRIBE_DID_FIND_OPPONENTS,
    
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_GET_MATCH_DATA,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_LIST_MATCH,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_LIST_PENDING_MATCH,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_CREATE_MATCH,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_INVITE_FRIENDS,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_JOIN_MATCH,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_MATCH_MOVE,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_READ_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_WRITE_BINARY,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_READ,
    CLOUDBUILDERMARMALADE_CALLBACK_MATCH_DID_WRITE,
    
    CLOUDBUILDERMARMALADE_CALLBACK_NOTIFICATION_DID_NOTIFY_USER,

    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_PEOPLE,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_SUBMIT_SCORE,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_LEADERBOARD_METADATA,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_LEADERBOARDS_METADATA,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_PLAYER_CENTERED_SCORES,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_TOP_SCORES,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_INCREMENT_ACHIEVEMENT,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_LOAD_ACHIEVEMENTS,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_REVEAL_ACHIEVEMENT,
    CLOUDBUILDERMARMALADE_CALLBACK_GOOGLEPLAY_DID_UNLOCK_ACHIEVEMENT,

    CLOUDBUILDERMARMALADE_CALLBACK_MAX
};
// \cond HIDDEN_DEFINES
S3E_BEGIN_C_DECL
// \endcond

/**
 * Returns S3E_TRUE if the CloudBuilderMarmalade extension is available.
 */
s3eBool CloudBuilderMarmaladeAvailable();

/**
 * Registers a callback to be called for an operating system event.
 *
 * The available callback types are listed in @ref CloudBuilderMarmaladeCallback.
 * @param cbid ID of the event for which to register.
 * @param fn callback function.
 * @param userdata Value to pass to the @e userdata parameter of @e NotifyFunc.
 * @return
 *  - @ref S3E_RESULT_SUCCESS if no error occurred.
 *  - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call CloudBuilderMarmaladeGetError() to retrieve an error code.
 *         This will return one of:
 *      - @ref S3E_DEVICE_ERR_PARAM if @e cbid is not a valid member of @ref CloudBuilderMarmaladeCallback or @e NotifyFunc is NULL.
 *      - @ref S3E_DEVICE_ERR_TOO_MANY If the maximum number of callbacks for this device has been exceeded.
 *      - @ref S3E_DEVICE_ERR_ALREADY_REG If (@e cbid, @e NotifyFunc) has already been registered.
 *
 * @see CloudBuilderMarmaladeUnRegister
 * @note For more information on the system data passed as a parameter to the callback
 * registered using this function, see the @ref CloudBuilderMarmaladeCallback enum.
 */
s3eResult CloudBuilderMarmaladeRegister(CloudBuilderMarmaladeCallback cbid, s3eCallback fn, void* userData);

/**
 * Unregister a callback for a given event.
 * @param cbid ID of the callback for which to register.
 * @param fn Callback Function.
 * @return
 * - @ref S3E_RESULT_SUCCESS if no error occurred.
 * - @ref S3E_RESULT_ERROR if the operation failed.\n
 *         Call CloudBuilderMarmaladeGetError() to retrieve an error code.
 *         This will return one of:
 *   - @ref S3E_FILE_ERR_PARAM if @e cbid is not a valid member of @ref CloudBuilderMarmaladeCallback.
 *   - @ref S3E_FILE_ERR_NOT_FOUND if @e fn is not registered for callback @e cbid.
 * @note For more information on the systemData passed as a parameter to the callback
 * registered using this function, see the CloudBuilderMarmaladeCallback enum.
 * @note It is not necessary to define a return value for any registered callback.
 * @see CloudBuilderMarmaladeRegister
 */
s3eResult CloudBuilderMarmaladeUnRegister(CloudBuilderMarmaladeCallback cbid, s3eCallback fn);

/**
 * Retrieves the last error as a string, if any, for this subdevice. This
 * function is only available in debug builds.
 * @see CloudBuilderMarmaladeGetError
 *
 * @remark This function, as opposed to CloudBuilderMarmaladeGetError(), will always
 * return the last error no matter how many times it is called. This function
 * should not be relied upon to indicate whether an error has just occurred.
 *
 * @par Required Header Files
 * CloudBuilderMarmalade.h
 */
const char* CloudBuilderMarmaladeGetErrorString();

/**
 * Retrieves the last error, if any, for this subdevice.
 * @see CloudBuilderMarmaladeGetErrorString
 *
 * @remark Calling this function will retrieve the last error and then remove
 * it from memory; therefore, any further calls to this function will not
 * return an error unless a subsequent error has occurred.
 *
 * @par Required Header Files
 * CloudBuilderMarmalade.h
 */
CloudBuilderMarmaladeError CloudBuilderMarmaladeGetError();

void** CloudBuilder_Init(void** aCotCFunctions);

void CloudBuilder_SetGlobalCotCCallback(CloudBuilderMarmaladeCallback aIndex, s3eCallback aCallback, void* aUserData);

void CloudBuilder_PopCallback();

/**
    aClan_didSetup is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult Clan_Setup(const char* aConfigurationJson, s3eCallback aClan_didSetup, void* aUserData);

s3eResult Clan_BatchBegin();

/**
    aClan_didBatchEnd is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Clan_BatchEnd(s3eCallback aClan_didBatchEnd, void* aUserData);

bool Clan_isSetup();

bool Clan_isUserLogged();

/**
    aUser_didRegisterAndLogin is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_RegisterAndLogin(const char* aEmail, const char* aPassword, const char* aPseudo, s3eCallback aUser_didRegisterAndLogin, void* aUserData);

/**
    aUser_didLogin is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult User_Login(const char* aPseudo, const char* aPassword, s3eCallback aUser_didLogin, void* aUserData);

/**
    aUser_didLoginWithFacebook is returned a (SResultLoginWith *) as first parameter and aUserData as second parameter
*/
s3eResult User_LoginWithFacebook(const char* aOptionalPassword, s3eCallback aUser_didLoginWithFacebook, void* aUserData);

/**
    aUser_didLoginWithGooglePlus is returned a (SResultLoginWith *) as first parameter and aUserData as second parameter
*/
s3eResult User_LoginWithGooglePlus(const char* aOptionalPassword, s3eCallback aUser_didLoginWithGooglePlus, void* aUserData);

/**
    aUser_didLoginWithGameCenter is returned a (SResultLoginWith *) as first parameter and aUserData as second parameter
*/
s3eResult User_LoginWithGameCenter(s3eCallback aUser_didLoginWithGameCenter, void* aUserData);

/**
    aUser_didLogout is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_Logout(s3eCallback aUser_didLogout, void* aUserData);

/**
    aUser_didLinkAccountWithFacebook is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_LinkAccountWithFacebook(s3eCallback aUser_didLinkAccountWithFacebook, void* aUserData);

/**
    aUser_didLinkAccountWithGooglePlus is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_LinkAccountWithGooglePlus(s3eCallback aUser_didLinkAccountWithGooglePlus, void* aUserData);

/**
    aUser_didLinkAccountWithGameCenter is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_LinkAccountWithGameCenter(s3eCallback aUser_didLinkAccountWithGameCenter, void* aUserData);

/**
    aUser_didChangePassword is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_ChangePassword(const char* aOldPassword, const char* aNewPassword, s3eCallback aUser_didChangePassword, void* aUserData);

/**
    aUser_didMailPassword is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_MailPassword(const char* aEmail, const char* aSubject, const char* aBody, s3eCallback aUser_didMailPassword, void* aUserData);

/**
    aUser_didSetUserProfile is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_SetUserProfile(const char* aJson, s3eCallback aUser_didSetUserProfile, void* aUserData);

/**
    aUser_didGetUserProfile is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult User_GetUserProfile(s3eCallback aUser_didGetUserProfile, void* aUserData);

const char* User_GetPseudo();

const char* User_GetMail();

/**
    aUser_didPublishOnMyFacebookWall is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_PublishOnMyFacebookWall(const char* aMessage, s3eCallback aUser_didPublishOnMyFacebookWall, void* aUserData);

/**
    aUser_didReadBinary is returned a (SResultReadBinary *) as first parameter and aUserData as second parameter
*/
s3eResult User_ReadBinary(const char* aKey, s3eCallback aUser_didReadBinary, void* aUserData);

/**
    aUser_didWriteBinary is returned a (SResultWriteBinary *) as first parameter and aUserData as second parameter
*/
s3eResult User_WriteBinary(const char* aKey, void* aPointer, unsigned long aLength, s3eCallback aUser_didWriteBinary, void* aUserData);

/**
    aUser_didRead is returned a (SResultRead *) as first parameter and aUserData as second parameter
*/
s3eResult User_Read(const char* aKey, s3eCallback aUser_didRead, void* aUserData);

/**
    aUser_didWrite is returned a (SResultWrite *) as first parameter and aUserData as second parameter
*/
s3eResult User_Write(const char* aKey, const char* aValue, s3eCallback aUser_didWrite, void* aUserData);

/**
    aUser_didSetProperties is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_SetProperties(bool aCanBeFound, const char* aPropertiesJson, s3eCallback aUser_didSetProperties, void* aUserData);

/**
    aUser_didGetProperties is returned a (SResultGetProperties *) as first parameter and aUserData as second parameter
*/
s3eResult User_GetProperties(s3eCallback aUser_didGetProperties, void* aUserData);

/**
    aUser_didCheckUser is returned a (SResultCheckUser *) as first parameter and aUserData as second parameter
*/
s3eResult User_CheckUser(const char* aIdent, s3eCallback aUser_didCheckUser, void* aUserData);

/**
    aUser_didSetAvatarSource is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult User_SetAvatarSource(cbmExternalNetwork aSource, s3eCallback aUser_didSetAvatarSource, void* aUserData);

/**
    aGame_didScore is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult Game_Score(long long aHighScore, const char* aMode, cbmScoreType aScoreType, const char* aInfoScore, bool aMayVary, s3eCallback aGame_didScore, void* aUserData);

/**
    aGame_didGetRank is returned a (SResultGetRank *) as first parameter and aUserData as second parameter
*/
s3eResult Game_GetRank(long long aHighScore, const char* aMode, cbmScoreType aScoreType, s3eCallback aGame_didGetRank, void* aUserData);

/**
    aGame_didBestHighScore is returned a (SResultBestHighScore *) as first parameter and aUserData as second parameter
*/
s3eResult Game_BestHighScore(int aCount, const char* aMode, cbmScoreType aScoreType, s3eCallback aGame_didBestHighScore, void* aUserData);

/**
    aGame_didCenteredScore is returned a (SResultBestHighScore *) as first parameter and aUserData as second parameter
*/
s3eResult Game_CenteredScore(int aCount, const char* aMode, cbmScoreType aScoreType, s3eCallback aGame_didCenteredScore, void* aUserData);

/**
    aGame_didGetRankArray is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Game_GetRankArray(const char* aScoreArrayJson, cbmScoreType aScoreType, s3eCallback aGame_didGetRankArray, void* aUserData);

/**
    aGame_didBestHighScoreArray is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Game_BestHighScoreArray(int aCount, const char* aArrayModesJson, cbmScoreType aScoreType, s3eCallback aGame_didBestHighScoreArray, void* aUserData);

/**
    aGame_didReadBinary is returned a (SResultReadBinary *) as first parameter and aUserData as second parameter
*/
s3eResult Game_ReadBinary(const char* aKey, s3eCallback aGame_didReadBinary, void* aUserData);

/**
    aGame_didWriteBinary is returned a (SResultWriteBinary *) as first parameter and aUserData as second parameter
*/
s3eResult Game_WriteBinary(const char* aKey, void* aPointer, unsigned long aLength, s3eCallback aGame_didWriteBinary, void* aUserData);

/**
    aGame_didRead is returned a (SResultRead *) as first parameter and aUserData as second parameter
*/
s3eResult Game_Read(const char* aKey, s3eCallback aGame_didRead, void* aUserData);

/**
    aGame_didWrite is returned a (SResultWrite *) as first parameter and aUserData as second parameter
*/
s3eResult Game_Write(const char* aKey, const char* aValue, s3eCallback aGame_didWrite, void* aUserData);

/**
    aTribe_didListUsers is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListUsers(const char* aContainsString, s3eCallback aTribe_didListUsers, void* aUserData);

/**
    aTribe_didListGlobalFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListGlobalFriends(s3eCallback aTribe_didListGlobalFriends, void* aUserData);

/**
    aTribe_didBlacklistGlobalFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_BlacklistGlobalFriends(s3eCallback aTribe_didBlacklistGlobalFriends, void* aUserData);

/**
    aTribe_didChangeGlobalRelationshipStatus is returned a (SResultChangeRelationshipStatus *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ChangeGlobalRelationshipStatus(const char* aFriendPseudo, cbmRelationChange aNewState, s3eCallback aTribe_didChangeGlobalRelationshipStatus, void* aUserData);

/**
    aTribe_didListFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListFriends(s3eCallback aTribe_didListFriends, void* aUserData);

/**
    aTribe_didBlacklistFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_BlacklistFriends(s3eCallback aTribe_didBlacklistFriends, void* aUserData);

/**
    aTribe_didChangeRelationshipStatus is returned a (SResultChangeRelationshipStatus *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ChangeRelationshipStatus(const char* aFriendPseudo, cbmRelationChange aNewState, s3eCallback aTribe_didChangeRelationshipStatus, void* aUserData);

/**
    aTribe_didListFacebookFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListFacebookFriends(s3eCallback aTribe_didListFacebookFriends, void* aUserData);

/**
    aTribe_didListGooglePlusFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListGooglePlusFriends(s3eCallback aTribe_didListGooglePlusFriends, void* aUserData);

/**
    aTribe_didListGameCenterFriends is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_ListGameCenterFriends(s3eCallback aTribe_didListGameCenterFriends, void* aUserData);

/**
    aTribe_didInviteFriendByMail is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_InviteFriendByMail(const char* aEmail, const char* aSubject, const char* aBody, s3eCallback aTribe_didInviteFriendByMail, void* aUserData);

/**
    aTribe_didInviteFriendByFBID is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_InviteFriendByFBID(const char* aFBFriendID, const char* aParamsJson, s3eCallback aTribe_didInviteFriendByFBID, void* aUserData);

/**
    aTribe_didInviteFriendByGooglePlusID is returned a (CloudBuilder_ErrorCode *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_InviteFriendByGooglePlusID(const char* aGooglePlusFriendID, const char* aParamsJson, s3eCallback aTribe_didInviteFriendByGooglePlusID, void* aUserData);

/**
    aTribe_didFriendsBestHighScore is returned a (SResultBestHighScore *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_FriendsBestHighScore(const char* aMode, cbmScoreType aScoreType, s3eCallback aTribe_didFriendsBestHighScore, void* aUserData);

/**
    aTribe_didFriendsBestHighScoreArray is returned a (SResultBestHighScore *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_FriendsBestHighScoreArray(const char* aArrayModesJson, cbmScoreType aScoreType, s3eCallback aTribe_didFriendsBestHighScoreArray, void* aUserData);

/**
    aTribe_didFindOpponents is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Tribe_FindOpponents(const char* aFilterJson, s3eCallback aTribe_didFindOpponents, void* aUserData);

const char* Match_GetActiveMatchID();

bool Match_HasActiveMatch();

/**
    aMatch_didGetMatchData is returned a (SResultWithMatchData *) as first parameter and aUserData as second parameter
*/
s3eResult Match_GetMatchData(const char* aMatchID, s3eCallback aMatch_didGetMatchData, void* aUserData);

/**
    aMatch_didListMatch is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Match_ListMatch(bool aIncludeAllData, s3eCallback aMatch_didListMatch, void* aUserData);

/**
    aMatch_didListPendingMatch is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult Match_ListPendingMatch(s3eCallback aMatch_didListPendingMatch, void* aUserData);

/**
    aMatch_didCreateMatch is returned a (SResultWithDescription *) as first parameter and aUserData as second parameter
*/
s3eResult Match_CreateMatch(const char* aName, bool aPrivateMatch, const char* aMatchDataJson, s3eCallback aMatch_didCreateMatch, void* aUserData);

/**
    aMatch_didInviteFriends is returned a (SResultWithDescription *) as first parameter and aUserData as second parameter
*/
s3eResult Match_InviteFriends(const char* aMatchID, const char* aArrayFriendsJson, bool aAutoAccept, const char* aNotifMessageJson, s3eCallback aMatch_didInviteFriends, void* aUserData);

/**
    aMatch_didJoinMatch is returned a (SResultWithDescription *) as first parameter and aUserData as second parameter
*/
s3eResult Match_JoinMatch(const char* aMatchID, bool aAccept, const char* aNotifMessageJson, s3eCallback aMatch_didJoinMatch, void* aUserData);

/**
    aMatch_didMatchMove is returned a (SResultWithDescription *) as first parameter and aUserData as second parameter
*/
s3eResult Match_MatchMove(cbmMatchPhase aMatchPhase, const char* aMatchID, const char* aMatchStateJson, const char* aNotifMessageJson, s3eCallback aMatch_didMatchMove, void* aUserData);

/**
    aMatch_didReadBinary is returned a (SResultMatchReadBinary *) as first parameter and aUserData as second parameter
*/
s3eResult Match_ReadBinary(const char* aMatchID, const char* aKey, s3eCallback aMatch_didReadBinary, void* aUserData);

/**
    aMatch_didWriteBinary is returned a (SResultMatchWriteBinary *) as first parameter and aUserData as second parameter
*/
s3eResult Match_WriteBinary(const char* aMatchID, const char* aKey, void* aPointer, unsigned long aLength, s3eCallback aMatch_didWriteBinary, void* aUserData);

/**
    aMatch_didRead is returned a (SResultMatchRead *) as first parameter and aUserData as second parameter
*/
s3eResult Match_Read(const char* aMatchID, const char* aKey, s3eCallback aMatch_didRead, void* aUserData);

/**
    aMatch_didWrite is returned a (SResultMatchWrite *) as first parameter and aUserData as second parameter
*/
s3eResult Match_Write(const char* aMatchID, const char* aKey, const char* aValue, s3eCallback aMatch_didWrite, void* aUserData);

s3eResult Notification_NotifyUser(const char* aUserPseudo, const char* aDataJson, void* aReference, const char* apnMessageJson, s3eCallback aNotification_didNotifyUser, void* aUserData);

bool GooglePlay_IsConnected();

/**
    aGooglePlay_didLoadPeople is returned a (SResultWithJson *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadPeople(const char* aListPeopleJSON, s3eCallback aGooglePlay_didLoadPeople, void* aUserData);

s3eResult GooglePlay_ShowAllLeaderboards();

s3eResult GooglePlay_ShowLeaderboard(const char* aLeaderboardID);

/**
    aGooglePlay_didSubmitScore is returned a (SResultGooglePlaySubmitScore *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_SubmitScore(const char* aLeaderboardID, long aScore, const char* aTag, s3eCallback aGooglePlay_didSubmitScore, void* aUserData);

/**
    aGooglePlay_didLoadLeaderboardMetadata is returned a (SResultGooglePlayLoadLeaderboardMetadata *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadLeaderboardMetadata(const char* aLeaderboardID, s3eCallback aGooglePlay_didLoadLeaderboardMetadata, void* aUserData);

/**
    aGooglePlay_didLoadLeaderboardsMetadata is returned a (SResultGooglePlayLoadLeaderboardMetadata *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadLeaderboardsMetadata(s3eCallback aGooglePlay_didLoadLeaderboardsMetadata, void* aUserData);

/**
    aGooglePlay_didLoadPlayerCenteredScores is returned a (SResultGooglePlayLoadScores *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadPlayerCenteredScores(const char* aLeaderboardID, cbmGooglePlayTimeSpan aSpan, cbmGooglePlayLeaderboardCollection aLeaderboardCollection, int aMaxResults, bool aForceReload, s3eCallback aGooglePlay_didLoadPlayerCenteredScores, void* aUserData);

/**
    aGooglePlay_didLoadTopScores is returned a (SResultGooglePlayLoadScores *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadTopScores(const char* aLeaderboardID, cbmGooglePlayTimeSpan aSpan, cbmGooglePlayLeaderboardCollection aLeaderboardCollection, int aMaxResults, bool aForceReload, s3eCallback aGooglePlay_didLoadTopScores, void* aUserData);

s3eResult GooglePlay_ShowAchievements();

/**
    aGooglePlay_didIncrementAchievement is returned a (SResultGooglePlayIncrementAchievement *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_IncrementAchievement(const char* aAchievementID, int aNumSteps, s3eCallback aGooglePlay_didIncrementAchievement, void* aUserData);

/**
    aGooglePlay_didLoadAchievements is returned a (SResultGooglePlayLoadAchievements *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_LoadAchievements(bool aForceReload, s3eCallback aGooglePlay_didLoadAchievements, void* aUserData);

/**
    aGooglePlay_didRevealAchievement is returned a (SResultGooglePlayAchievementResult *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_RevealAchievement(const char* aAchievementID, s3eCallback aGooglePlay_didRevealAchievement, void* aUserData);

/**
    aGooglePlay_didUnlockAchievement is returned a (SResultGooglePlayAchievementResult *) as first parameter and aUserData as second parameter
*/
s3eResult GooglePlay_UnlockAchievement(const char* aAchievementID, s3eCallback aGooglePlay_didUnlockAchievement, void* aUserData);

S3E_END_C_DECL

#endif /* !S3E_EXT_CLOUDBUILDERMARMALADE_H */
